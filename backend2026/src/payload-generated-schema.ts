
/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from '@payloadcms/db-postgres'
import { pgTable, index, uniqueIndex, foreignKey, integer, varchar, timestamp, serial, numeric, jsonb, pgEnum } from '@payloadcms/db-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-postgres/drizzle'
export const enum_borghi_regione = pgEnum('enum_borghi_regione', ['Abruzzo', 'Basilicata', 'Calabria', 'Campania', 'Emilia-Romagna', 'Friuli-Venezia Giulia', 'Lazio', 'Liguria', 'Lombardia', 'Marche', 'Molise', 'Piemonte', 'Puglia', 'Sardegna', 'Sicilia', 'Toscana', 'Trentino-Alto Adige', 'Umbria', 'Valle d'Aosta', 'Veneto'])

export const users_sessions = pgTable('users_sessions', {
  _order: integer('_order').notNull(),
  _parentID: integer('_parent_id').notNull(),
  id: varchar('id').primaryKey(),
  createdAt: timestamp('created_at', {mode: 'string',withTimezone: true,precision: 3}),
  expiresAt: timestamp('expires_at', {mode: 'string',withTimezone: true,precision: 3}).notNull(),
}, (columns) => [
    index('users_sessions_order_idx').on(columns._order), index('users_sessions_parent_id_idx').on(columns._parentID), foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [users.id],
      name: 'users_sessions_parent_id_fk'
    }).onDelete('cascade'),
]
)


export const users = pgTable('users', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', {mode: 'string',withTimezone: true,precision: 3}).defaultNow().notNull(),
  createdAt: timestamp('created_at', {mode: 'string',withTimezone: true,precision: 3}).defaultNow().notNull(),
  email: varchar('email').notNull(),
  resetPasswordToken: varchar('reset_password_token'),
  resetPasswordExpiration: timestamp('reset_password_expiration', {mode: 'string',withTimezone: true,precision: 3}),
  salt: varchar('salt'),
  hash: varchar('hash'),
  loginAttempts: numeric('login_attempts', {mode: 'number'}).default('0'),
  lockUntil: timestamp('lock_until', {mode: 'string',withTimezone: true,precision: 3}),
}, (columns) => [
    index('users_updated_at_idx').on(columns.updatedAt), index('users_created_at_idx').on(columns.createdAt), uniqueIndex('users_email_idx').on(columns.email),
]
)


export const media = pgTable('media', {
  id: serial('id').primaryKey(),
  alt: varchar('alt').notNull(),
  updatedAt: timestamp('updated_at', {mode: 'string',withTimezone: true,precision: 3}).defaultNow().notNull(),
  createdAt: timestamp('created_at', {mode: 'string',withTimezone: true,precision: 3}).defaultNow().notNull(),
  url: varchar('url'),
  thumbnailURL: varchar('thumbnail_u_r_l'),
  filename: varchar('filename'),
  mimeType: varchar('mime_type'),
  filesize: numeric('filesize', {mode: 'number'}),
  width: numeric('width', {mode: 'number'}),
  height: numeric('height', {mode: 'number'}),
  focalX: numeric('focal_x', {mode: 'number'}),
  focalY: numeric('focal_y', {mode: 'number'}),
}, (columns) => [
    index('media_updated_at_idx').on(columns.updatedAt), index('media_created_at_idx').on(columns.createdAt), uniqueIndex('media_filename_idx').on(columns.filename),
]
)


export const dormire_immagini_galleria = pgTable('dormire_immagini_galleria', {
  _order: integer('_order').notNull(),
  _parentID: integer('_parent_id').notNull(),
  id: varchar('id').primaryKey(),
  immagine: integer('immagine_id').notNull().references(() => media.id, {
      onDelete: 'set null'
  }),
  did: varchar('did'),
}, (columns) => [
    index('dormire_immagini_galleria_order_idx').on(columns._order), index('dormire_immagini_galleria_parent_id_idx').on(columns._parentID), index('dormire_immagini_galleria_immagine_idx').on(columns.immagine), foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [dormire.id],
      name: 'dormire_immagini_galleria_parent_id_fk'
    }).onDelete('cascade'),
]
)


export const dormire_stanze_immagini = pgTable('dormire_stanze_immagini', {
  _order: integer('_order').notNull(),
  _parentID: varchar('_parent_id').notNull(),
  id: varchar('id').primaryKey(),
  immagine: integer('immagine_id').notNull().references(() => media.id, {
      onDelete: 'set null'
  }),
  did: varchar('did'),
}, (columns) => [
    index('dormire_stanze_immagini_order_idx').on(columns._order), index('dormire_stanze_immagini_parent_id_idx').on(columns._parentID), index('dormire_stanze_immagini_immagine_idx').on(columns.immagine), foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [dormire_stanze.id],
      name: 'dormire_stanze_immagini_parent_id_fk'
    }).onDelete('cascade'),
]
)


export const dormire_stanze = pgTable('dormire_stanze', {
  _order: integer('_order').notNull(),
  _parentID: integer('_parent_id').notNull(),
  id: varchar('id').primaryKey(),
  nome: varchar('nome').notNull(),
  prezzo: numeric('prezzo', {mode: 'number'}),
  descrizione: varchar('descrizione'),
}, (columns) => [
    index('dormire_stanze_order_idx').on(columns._order), index('dormire_stanze_parent_id_idx').on(columns._parentID), foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [dormire.id],
      name: 'dormire_stanze_parent_id_fk'
    }).onDelete('cascade'),
]
)


export const dormire = pgTable('dormire', {
  id: serial('id').primaryKey(),
  title: varchar('title').notNull(),
  slug: varchar('slug'),
  borgo: integer('borgo_id').notNull().references(() => borghi.id, {
      onDelete: 'set null'
  }),
  descrizioneBreve: varchar('descrizione_breve'),
  immagineCopertina: integer('immagine_copertina_id').references(() => media.id, {
      onDelete: 'set null'
  }),
  updatedAt: timestamp('updated_at', {mode: 'string',withTimezone: true,precision: 3}).defaultNow().notNull(),
  createdAt: timestamp('created_at', {mode: 'string',withTimezone: true,precision: 3}).defaultNow().notNull(),
}, (columns) => [
    uniqueIndex('dormire_slug_idx').on(columns.slug), index('dormire_borgo_idx').on(columns.borgo), index('dormire_immagine_copertina_idx').on(columns.immagineCopertina), index('dormire_updated_at_idx').on(columns.updatedAt), index('dormire_created_at_idx').on(columns.createdAt),
]
)


export const borghi_immagini_galleria = pgTable('borghi_immagini_galleria', {
  _order: integer('_order').notNull(),
  _parentID: integer('_parent_id').notNull(),
  id: varchar('id').primaryKey(),
  immagine: integer('immagine_id').notNull().references(() => media.id, {
      onDelete: 'set null'
  }),
  did: varchar('did'),
}, (columns) => [
    index('borghi_immagini_galleria_order_idx').on(columns._order), index('borghi_immagini_galleria_parent_id_idx').on(columns._parentID), index('borghi_immagini_galleria_immagine_idx').on(columns.immagine), foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [borghi.id],
      name: 'borghi_immagini_galleria_parent_id_fk'
    }).onDelete('cascade'),
]
)


export const borghi = pgTable('borghi', {
  id: serial('id').primaryKey(),
  title: varchar('title').notNull(),
  slug: varchar('slug'),
  regione: enum_borghi_regione('regione').notNull(),
  descrizioneBreve: varchar('descrizione_breve'),
  immagineCopertina: integer('immagine_copertina_id').references(() => media.id, {
      onDelete: 'set null'
  }),
  updatedAt: timestamp('updated_at', {mode: 'string',withTimezone: true,precision: 3}).defaultNow().notNull(),
  createdAt: timestamp('created_at', {mode: 'string',withTimezone: true,precision: 3}).defaultNow().notNull(),
}, (columns) => [
    uniqueIndex('borghi_slug_idx').on(columns.slug), index('borghi_immagine_copertina_idx').on(columns.immagineCopertina), index('borghi_updated_at_idx').on(columns.updatedAt), index('borghi_created_at_idx').on(columns.createdAt),
]
)


export const payload_locked_documents = pgTable('payload_locked_documents', {
  id: serial('id').primaryKey(),
  globalSlug: varchar('global_slug'),
  updatedAt: timestamp('updated_at', {mode: 'string',withTimezone: true,precision: 3}).defaultNow().notNull(),
  createdAt: timestamp('created_at', {mode: 'string',withTimezone: true,precision: 3}).defaultNow().notNull(),
}, (columns) => [
    index('payload_locked_documents_global_slug_idx').on(columns.globalSlug), index('payload_locked_documents_updated_at_idx').on(columns.updatedAt), index('payload_locked_documents_created_at_idx').on(columns.createdAt),
]
)


export const payload_locked_documents_rels = pgTable('payload_locked_documents_rels', {
  id: serial('id').primaryKey(),
  order: integer('order'),
  parent: integer('parent_id').notNull(),
  path: varchar('path').notNull(),
  usersID: integer('users_id'),
  mediaID: integer('media_id'),
  dormireID: integer('dormire_id'),
  borghiID: integer('borghi_id'),
}, (columns) => [
    index('payload_locked_documents_rels_order_idx').on(columns.order), index('payload_locked_documents_rels_parent_idx').on(columns.parent), index('payload_locked_documents_rels_path_idx').on(columns.path), index('payload_locked_documents_rels_users_id_idx').on(columns.usersID), index('payload_locked_documents_rels_media_id_idx').on(columns.mediaID), index('payload_locked_documents_rels_dormire_id_idx').on(columns.dormireID), index('payload_locked_documents_rels_borghi_id_idx').on(columns.borghiID), foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk'
    }).onDelete('cascade'), foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk'
    }).onDelete('cascade'), foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk'
    }).onDelete('cascade'), foreignKey({
      columns: [columns['dormireID']],
      foreignColumns: [dormire.id],
      name: 'payload_locked_documents_rels_dormire_fk'
    }).onDelete('cascade'), foreignKey({
      columns: [columns['borghiID']],
      foreignColumns: [borghi.id],
      name: 'payload_locked_documents_rels_borghi_fk'
    }).onDelete('cascade'),
]
)


export const payload_preferences = pgTable('payload_preferences', {
  id: serial('id').primaryKey(),
  key: varchar('key'),
  value: jsonb('value'),
  updatedAt: timestamp('updated_at', {mode: 'string',withTimezone: true,precision: 3}).defaultNow().notNull(),
  createdAt: timestamp('created_at', {mode: 'string',withTimezone: true,precision: 3}).defaultNow().notNull(),
}, (columns) => [
    index('payload_preferences_key_idx').on(columns.key), index('payload_preferences_updated_at_idx').on(columns.updatedAt), index('payload_preferences_created_at_idx').on(columns.createdAt),
]
)


export const payload_preferences_rels = pgTable('payload_preferences_rels', {
  id: serial('id').primaryKey(),
  order: integer('order'),
  parent: integer('parent_id').notNull(),
  path: varchar('path').notNull(),
  usersID: integer('users_id'),
}, (columns) => [
    index('payload_preferences_rels_order_idx').on(columns.order), index('payload_preferences_rels_parent_idx').on(columns.parent), index('payload_preferences_rels_path_idx').on(columns.path), index('payload_preferences_rels_users_id_idx').on(columns.usersID), foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk'
    }).onDelete('cascade'), foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk'
    }).onDelete('cascade'),
]
)


export const payload_migrations = pgTable('payload_migrations', {
  id: serial('id').primaryKey(),
  name: varchar('name'),
  batch: numeric('batch', {mode: 'number'}),
  updatedAt: timestamp('updated_at', {mode: 'string',withTimezone: true,precision: 3}).defaultNow().notNull(),
  createdAt: timestamp('created_at', {mode: 'string',withTimezone: true,precision: 3}).defaultNow().notNull(),
}, (columns) => [
    index('payload_migrations_updated_at_idx').on(columns.updatedAt), index('payload_migrations_created_at_idx').on(columns.createdAt),
]
)

export const relations_users_sessions = relations(users_sessions, ({ one }) => ({
  _parentID: one(users, {
    
    fields: [users_sessions._parentID],
    references: [users.id],
    relationName: 'sessions',
    }),
      }))
export const relations_users = relations(users, ({ many }) => ({
  sessions: many(users_sessions, {
            relationName: 'sessions',
    }),
      }))
export const relations_media = relations(media, () => ({
  
      }))
export const relations_dormire_immagini_galleria = relations(dormire_immagini_galleria, ({ one }) => ({
  _parentID: one(dormire, {
    
    fields: [dormire_immagini_galleria._parentID],
    references: [dormire.id],
    relationName: 'immaginiGalleria',
    }),
    immagine: one(media, {
    
    fields: [dormire_immagini_galleria.immagine],
    references: [media.id],
    relationName: 'immagine',
    }),
      }))
export const relations_dormire_stanze_immagini = relations(dormire_stanze_immagini, ({ one }) => ({
  _parentID: one(dormire_stanze, {
    
    fields: [dormire_stanze_immagini._parentID],
    references: [dormire_stanze.id],
    relationName: 'immagini',
    }),
    immagine: one(media, {
    
    fields: [dormire_stanze_immagini.immagine],
    references: [media.id],
    relationName: 'immagine',
    }),
      }))
export const relations_dormire_stanze = relations(dormire_stanze, ({ one, many }) => ({
  _parentID: one(dormire, {
    
    fields: [dormire_stanze._parentID],
    references: [dormire.id],
    relationName: 'stanze',
    }),
    immagini: many(dormire_stanze_immagini, {
            relationName: 'immagini',
    }),
      }))
export const relations_dormire = relations(dormire, ({ one, many }) => ({
  borgo: one(borghi, {
    
    fields: [dormire.borgo],
    references: [borghi.id],
    relationName: 'borgo',
    }),
    immagineCopertina: one(media, {
    
    fields: [dormire.immagineCopertina],
    references: [media.id],
    relationName: 'immagineCopertina',
    }),
    immaginiGalleria: many(dormire_immagini_galleria, {
            relationName: 'immaginiGalleria',
    }),
    stanze: many(dormire_stanze, {
            relationName: 'stanze',
    }),
      }))
export const relations_borghi_immagini_galleria = relations(borghi_immagini_galleria, ({ one }) => ({
  _parentID: one(borghi, {
    
    fields: [borghi_immagini_galleria._parentID],
    references: [borghi.id],
    relationName: 'immaginiGalleria',
    }),
    immagine: one(media, {
    
    fields: [borghi_immagini_galleria.immagine],
    references: [media.id],
    relationName: 'immagine',
    }),
      }))
export const relations_borghi = relations(borghi, ({ one, many }) => ({
  immagineCopertina: one(media, {
    
    fields: [borghi.immagineCopertina],
    references: [media.id],
    relationName: 'immagineCopertina',
    }),
    immaginiGalleria: many(borghi_immagini_galleria, {
            relationName: 'immaginiGalleria',
    }),
      }))
export const relations_payload_locked_documents_rels = relations(payload_locked_documents_rels, ({ one }) => ({
  parent: one(payload_locked_documents, {
    
    fields: [payload_locked_documents_rels.parent],
    references: [payload_locked_documents.id],
    relationName: '_rels',
    }),
    usersID: one(users, {
    
    fields: [payload_locked_documents_rels.usersID],
    references: [users.id],
    relationName: 'users',
    }),
    mediaID: one(media, {
    
    fields: [payload_locked_documents_rels.mediaID],
    references: [media.id],
    relationName: 'media',
    }),
    dormireID: one(dormire, {
    
    fields: [payload_locked_documents_rels.dormireID],
    references: [dormire.id],
    relationName: 'dormire',
    }),
    borghiID: one(borghi, {
    
    fields: [payload_locked_documents_rels.borghiID],
    references: [borghi.id],
    relationName: 'borghi',
    }),
      }))
export const relations_payload_locked_documents = relations(payload_locked_documents, ({ many }) => ({
  _rels: many(payload_locked_documents_rels, {
            relationName: '_rels',
    }),
      }))
export const relations_payload_preferences_rels = relations(payload_preferences_rels, ({ one }) => ({
  parent: one(payload_preferences, {
    
    fields: [payload_preferences_rels.parent],
    references: [payload_preferences.id],
    relationName: '_rels',
    }),
    usersID: one(users, {
    
    fields: [payload_preferences_rels.usersID],
    references: [users.id],
    relationName: 'users',
    }),
      }))
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
            relationName: '_rels',
    }),
      }))
export const relations_payload_migrations = relations(payload_migrations, () => ({
  
      }))

type DatabaseSchema = {
  enum_borghi_regione: typeof enum_borghi_regione
  users_sessions: typeof users_sessions
  users: typeof users
  media: typeof media
  dormire_immagini_galleria: typeof dormire_immagini_galleria
  dormire_stanze_immagini: typeof dormire_stanze_immagini
  dormire_stanze: typeof dormire_stanze
  dormire: typeof dormire
  borghi_immagini_galleria: typeof borghi_immagini_galleria
  borghi: typeof borghi
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  relations_users_sessions: typeof relations_users_sessions
  relations_users: typeof relations_users
  relations_media: typeof relations_media
  relations_dormire_immagini_galleria: typeof relations_dormire_immagini_galleria
  relations_dormire_stanze_immagini: typeof relations_dormire_stanze_immagini
  relations_dormire_stanze: typeof relations_dormire_stanze
  relations_dormire: typeof relations_dormire
  relations_borghi_immagini_galleria: typeof relations_borghi_immagini_galleria
  relations_borghi: typeof relations_borghi
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
}
    

declare module '@payloadcms/db-postgres' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
    